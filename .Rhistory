View(damage)
source('C:/Users/fl299/PhD/Code/ONC_JC1_RWM_semi-quantitative_analysis_20200522.R')
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(vars(grader, rep)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5)
?facet_grid
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(vars(grader, rep), rows = 2, cols = 2) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5)
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = var(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5)
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5)
write.csv(damage.fiona.1, '\\\\me-filer1\\home$\\fl299\\Desktop\\ONC\ data\ -\ Copy\\Crush\\wholemount_survival_1.csv')
source('C:/Users/fl299/PhD/Code/ONC_JC1_RWM_semi-quantitative_analysis_20200522.R')
source('C:/Users/fl299/PhD/Code/ONC_JC1_RWM_semi-quantitative_analysis_20200522.R')
e
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5)
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
#mimic Vessy's Prism graphs
custom_theme = theme_classic(base_size = 18) +
theme(plot.background = element_rect(fill = "#FDFDFDFF"),
legend.background = element_rect(fill = "#FDFDFDFF"),#background for my slides template - change for figures
plot.tag = element_text(size = rel(2)),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, face = 'bold'))
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
#mimic Vessy's Prism graphs
custom_theme = theme_classic(base_size = 18) +
theme(plot.background = element_rect(fill = "#FDFDFDFF"),
panel.background = element_rect(fill = "#FDFDFDFF"),
legend.background = element_rect(fill = "#FDFDFDFF"),#background for my slides template - change for figures
plot.tag = element_text(size = rel(2)),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, face = 'bold'))
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5)
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
theme(panel.border = element_line(colour = 'black', size = 1))
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
theme(panel.border = element_rect(colour = 'black', size = 1))
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
theme(panel.border = element_rect(colour = 'black'))
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
theme(panel.border = element_rect(colour = 'black', fill = NULL))
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
theme(panel.border = element_rect(colour = 'black', fill = NA))
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
#mimic Vessy's Prism graphs
custom_theme = theme_classic(base_size = 18) +
theme(plot.background = element_rect(fill = "#FDFDFDFF"),
panel.background = element_rect(fill = "#FDFDFDFF"),
legend.background = element_rect(fill = "#FDFDFDFF"),#background for my slides template - change for figures
plot.tag = element_text(size = rel(2)),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, face = 'bold'))
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
source('C:/Users/fl299/PhD/Code/ONC_JC1_RWM_semi-quantitative_analysis_20200522.R')
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
#comparison across graders
ggplot(damage.grouped, aes(x = cond, y = damage)) +
facet_grid(rows = vars(rep), cols = vars(grader)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
theme(panel.border = element_rect(colour = 'black', fill = NA))
View(key[grepl("16L", key$original),])
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 3, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
#consensus
#geom_boxplot(alpha = 0, color = 'black') +
ggplot(damage.grouped.consensus, aes(x = cond, y = damage)) +
geom_beeswarm(aes(color = cond, shape = cond), size = 4, priority = 'ascending', cex = 4) +
stat_summary(fun.ymin = mean, fun.ymax = mean, geom = 'errorbar', color = 'black', size = 1) +
stat_summary(fun.data = mean_se, geom = 'errorbar', color = 'black', size = 1, width = 0.5) +
scale_y_continuous(breaks = c(1,2,3,4,5), limits = c(1,6)) +
labs(x = '', y = 'Damage score') +
custom_shape + custom_colour +
custom_theme + theme(legend.position = 'none') +
stat_compare_means(size = 5) +
stat_summary(aes(group = 1), fun.data = function(df){value = 5.25; data.frame(ymin = value, y = value, ymax = value)}, geom = 'line', size = 1) + #hacky line for NS
annotate(geom = 'text', x = "WT protrudin", y = 5.5, label = 'N.S.')
install.packages(c('tinytex', 'rmarkdown'))
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
dir.create("./figures/")
knitr::opts_chunk$set(fig.path = "figures/")
library(dplyr)
library(ggplot2)
library(patchwork)
library(stringr)
library(ggpubr)
source('C:\\Users\\fl299\\GitHub\\first-year-report\\data_analysis\\report_setup.R')
genes = c('Gapdh', 'Fyco1', 'Zfyve27')
full.csv = read.csv('C:\\Users\\fl299\\PhD\\Data\\Others\'\\Published\\Koseki\ et\ al\ 2017\\koseki_et_al_2017_data_condensed.csv', stringsAsFactors = F)
genes.csv = full.csv %>% filter(gene_short_name %in% genes)
df = data.frame(gene = rep(genes, 5),#one entry for each day measured
day = rep(c(1, 4, 8, 16, 24), each = length(genes)))
df$mean = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_mean")] )
})
df$sd = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_sd")] )
})
df$gene = factor(df$gene, levels = c('Gapdh', 'Fyco1', 'Zfyve27', 'Arf1', 'Gbf1', 'Rab2'))
koseki = ggplot(df, aes(x = day, y = mean, color = gene)) +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 2) +
geom_point(aes(shape = gene), size = 3) +
labs(x = expression("Days "~italic("in vitro")), y = "Gene expression (FPKM)", title = "Cortical neuron culture") +
d_format + report_theme + theme(legend.title = element_text(size = 14)) + scale_color_brewer(palette = "Dark2", labels = c('GAPDH', 'FYCO1', 'Protrudin'), name = "Gene") + scale_shape_discrete(labels = c('GAPDH', 'FYCO1', 'Protrudin'), name = "Gene")
koseki
legend = as_ggplot(get_legend(koseki))
koseki = ggplot(df, aes(x = day, y = mean, color = gene)) +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 2) +
geom_point(aes(shape = gene), size = 3) +
labs(x = expression("Days "~italic("in vitro")), y = "Gene expression (FPKM)", title = "Cortical neuron culture") +
d_format + report_theme + theme(legend.title = element_text(size = 14)) + scale_color_brewer(palette = "Dark2", labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2'), name = "Gene") + scale_shape_discrete(labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2'), name = "Gene")
koseki
legend = as_ggplot(get_legend(koseki))
genes = c('Gapdh', 'Fyco1', 'Zfyve27', 'Rab2')
full.csv = read.csv('C:\\Users\\fl299\\PhD\\Data\\Others\'\\Published\\Koseki\ et\ al\ 2017\\koseki_et_al_2017_data_condensed.csv', stringsAsFactors = F)
genes.csv = full.csv %>% filter(gene_short_name %in% genes)
df = data.frame(gene = rep(genes, 5),#one entry for each day measured
day = rep(c(1, 4, 8, 16, 24), each = length(genes)))
df$mean = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_mean")] )
})
df$sd = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_sd")] )
})
df$gene = factor(df$gene, levels = c('Gapdh', 'Fyco1', 'Zfyve27', 'Arf1', 'Gbf1', 'Rab2'))
koseki = ggplot(df, aes(x = day, y = mean, color = gene)) +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 2) +
geom_point(aes(shape = gene), size = 3) +
labs(x = expression("Days "~italic("in vitro")), y = "Gene expression (FPKM)", title = "Cortical neuron culture") +
d_format + report_theme + theme(legend.title = element_text(size = 14)) + scale_color_brewer(palette = "Dark2", labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2'), name = "Gene") + scale_shape_discrete(labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2'), name = "Gene")
koseki
knitr::opts_chunk$set(echo = TRUE)
dir.create("./figures/")
knitr::opts_chunk$set(fig.path = "figures/")
library(dplyr)
library(ggplot2)
library(patchwork)
library(stringr)
library(ggpubr)
source('C:\\Users\\fl299\\GitHub\\first-year-report\\data_analysis\\report_setup.R')
genes = c('Gapdh', 'Fyco1', 'Zfyve27', 'Rab2')
full.csv = read.csv('C:\\Users\\fl299\\PhD\\Data\\Others\'\\Published\\Koseki\ et\ al\ 2017\\koseki_et_al_2017_data_condensed.csv', stringsAsFactors = F)
genes.csv = full.csv %>% filter(gene_short_name %in% genes)
df = data.frame(gene = rep(genes, 5),#one entry for each day measured
day = rep(c(1, 4, 8, 16, 24), each = length(genes)))
df$mean = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_mean")] )
})
df$sd = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_sd")] )
})
df$gene = factor(df$gene, levels = c('Gapdh', 'Fyco1', 'Zfyve27', 'Arf1', 'Gbf1', 'Rab2'))
koseki = ggplot(df, aes(x = day, y = mean, color = gene)) +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 2) +
geom_point(aes(shape = gene), size = 3) +
labs(x = expression("Days "~italic("in vitro")), y = "Gene expression (FPKM)", title = "Cortical neuron culture") +
d_format + report_theme + theme(legend.title = element_text(size = 14)) + scale_color_brewer(palette = "Dark2", labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2'), name = "Gene") + scale_shape_discrete(labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2'), name = "Gene")
koseki
View(koseki)
View(df)
genes = c('Gapdh', 'Fyco1', 'Zfyve27', 'Rab2a', 'Rab2b')
full.csv = read.csv('C:\\Users\\fl299\\PhD\\Data\\Others\'\\Published\\Koseki\ et\ al\ 2017\\koseki_et_al_2017_data_condensed.csv', stringsAsFactors = F)
genes.csv = full.csv %>% filter(gene_short_name %in% genes)
df = data.frame(gene = rep(genes, 5),#one entry for each day measured
day = rep(c(1, 4, 8, 16, 24), each = length(genes)))
df$mean = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_mean")] )
})
df$sd = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_sd")] )
})
df$gene = factor(df$gene, levels = c('Gapdh', 'Fyco1', 'Zfyve27', 'Arf1', 'Gbf1', 'Rab2a', 'Rab2b'))
koseki = ggplot(df, aes(x = day, y = mean, color = gene)) +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 2) +
geom_point(aes(shape = gene), size = 3) +
labs(x = expression("Days "~italic("in vitro")), y = "Gene expression (FPKM)", title = "Cortical neuron culture") +
d_format + report_theme + theme(legend.title = element_text(size = 14)) + scale_color_brewer(palette = "Dark2", labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2a', 'Rab2b'), name = "Gene") + scale_shape_discrete(labels = c('GAPDH', 'FYCO1', 'Protrudin', 'Rab2a', 'Rab2b'), name = "Gene")
koseki
legend = as_ggplot(get_legend(koseki))
#genes = c('Gapdh', 'Fyco1', 'Zfyve27', 'Rab2a', 'Rab2b')
#genes = c('Fyco1', 'Zfyve27', 'Rab2a', 'Rab2b')
full.csv = read.csv('C:\\Users\\fl299\\PhD\\Data\\Others\'\\Published\\Koseki\ et\ al\ 2017\\koseki_et_al_2017_data_condensed.csv', stringsAsFactors = F)
genes.csv = full.csv %>% filter(gene_short_name %in% genes)
df = data.frame(gene = rep(genes, 5),#one entry for each day measured
day = rep(c(1, 4, 8, 16, 24), each = length(genes)))
df$mean = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_mean")] )
})
df$sd = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_sd")] )
})
df$gene = factor(df$gene, levels = c('Fyco1', 'Zfyve27', 'Arf1', 'Gbf1', 'Rab2a', 'Rab2b'))
koseki = ggplot(df, aes(x = day, y = mean, color = gene)) +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 2) +
geom_point(aes(shape = gene), size = 3) +
labs(x = expression("Days "~italic("in vitro")), y = "Gene expression (FPKM)", title = "Cortical neuron culture") +
d_format + report_theme + theme(legend.title = element_text(size = 14)) + scale_color_brewer(palette = "Dark2", labels = c('FYCO1', 'Protrudin', 'Rab2a', 'Rab2b'), name = "Gene") + scale_shape_discrete(labels = c('FYCO1', 'Protrudin', 'Rab2a', 'Rab2b'), name = "Gene")
koseki
legend = as_ggplot(get_legend(koseki))
#genes = c('Gapdh', 'Fyco1', 'Zfyve27', 'Rab2a', 'Rab2b')
genes = c('Fyco1', 'Zfyve27', 'Rab2a', 'Rab2b')
full.csv = read.csv('C:\\Users\\fl299\\PhD\\Data\\Others\'\\Published\\Koseki\ et\ al\ 2017\\koseki_et_al_2017_data_condensed.csv', stringsAsFactors = F)
genes.csv = full.csv %>% filter(gene_short_name %in% genes)
df = data.frame(gene = rep(genes, 5),#one entry for each day measured
day = rep(c(1, 4, 8, 16, 24), each = length(genes)))
df$mean = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_mean")] )
})
df$sd = sapply(1:nrow(df), function(i){
g = df$gene[i]
d = df$day[i]
return( genes.csv[genes.csv$gene_short_name == g, paste0("D", d, "_sd")] )
})
df$gene = factor(df$gene, levels = c('Fyco1', 'Zfyve27', 'Arf1', 'Gbf1', 'Rab2a', 'Rab2b'))
koseki = ggplot(df, aes(x = day, y = mean, color = gene)) +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 2) +
geom_point(aes(shape = gene), size = 3) +
labs(x = expression("Days "~italic("in vitro")), y = "Gene expression (FPKM)", title = "Cortical neuron culture") +
d_format + report_theme + theme(legend.title = element_text(size = 14)) + scale_color_brewer(palette = "Dark2", labels = c('FYCO1', 'Protrudin', 'Rab2a', 'Rab2b'), name = "Gene") + scale_shape_discrete(labels = c('FYCO1', 'Protrudin', 'Rab2a', 'Rab2b'), name = "Gene")
koseki
legend = as_ggplot(get_legend(koseki))
install.packages('ghibli')
library(ghibli)
?ghibli
rgb(153, 0, 153)
?scales
install.packages('jtools')
install.packages('jtools')
install.packages("jtools")
install.packages("jtools")
install.packages("jtools")
library(jtools)
update.packages(ggplot2)
update.packages('ggplot2')
library(jtools)
library(ggplot2)
update.packages('patchwork')
library(jtools)
install.packages(c("backports", "broom", "callr", "car", "carData", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "ellipsis", "foreach", "fs", "ggpubr", "ggraph", "ggrepel", "git2r", "glue", "gmp", "graphlayouts", "haven", "httpuv", "igraph", "later", "lifecycle", "lme4", "lubridate", "maptools", "matrixStats", "modelr", "Morpho", "mvtnorm", "natmanager", "nloptr", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "PMCMRplus", "promises", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rgl", "rJava", "rlang", "roxygen2", "rversions", "scales", "shiny", "sp", "stringi", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "usethis", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "car", "carData", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "ellipsis", "foreach", "fs", "ggpubr", "ggraph", "ggrepel", "git2r", "glue", "gmp", "graphlayouts", "haven", "httpuv", "igraph", "later", "lifecycle", "lme4", "lubridate", "maptools", "matrixStats", "modelr", "Morpho", "mvtnorm", "natmanager", "nloptr", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "PMCMRplus", "promises", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rgl", "rJava", "rlang", "roxygen2", "rversions", "scales", "shiny", "sp", "stringi", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "usethis", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "car", "carData", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "ellipsis", "foreach", "fs", "ggpubr", "ggraph", "ggrepel", "git2r", "glue", "gmp", "graphlayouts", "haven", "httpuv", "igraph", "later", "lifecycle", "lme4", "lubridate", "maptools", "matrixStats", "modelr", "Morpho", "mvtnorm", "natmanager", "nloptr", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "PMCMRplus", "promises", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rgl", "rJava", "rlang", "roxygen2", "rversions", "scales", "shiny", "sp", "stringi", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "usethis", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "callr", "car", "carData", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "ellipsis", "foreach", "fs", "ggpubr", "ggraph", "ggrepel", "git2r", "glue", "gmp", "graphlayouts", "haven", "httpuv", "igraph", "later", "lifecycle", "lme4", "lubridate", "maptools", "matrixStats", "modelr", "Morpho", "mvtnorm", "natmanager", "nloptr", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "PMCMRplus", "promises", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rgl", "rJava", "rlang", "roxygen2", "rversions", "scales", "shiny", "sp", "stringi", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "usethis", "vctrs", "withr", "xfun", "xml2"))
if (!require("remotes")) install.packages("remotes", repos = "https://cran.rstudio.org")
remotes::install_github("rstudio/bookdown")
remotes::install_github("ismayc/thesisdown")
remotes::install_github("fmlove/thesisdown")
remove.packages("thesisdown", lib="~/R/win-library/3.6")
remotes::install_github("fmlove/thesisdown")
library(thesisdown)
library(citr)
citr:::insert_citation()
citr:::insert_citation()
install.packages('bookdown')
library(bookdown)
install.packages('searcher')
library(searcher)
sum(c(NA, 'test'))
search_google()
?search_google
search_duckduckgo()
search_stackoverflow()
?bookdown
bookdown::render_book("index.Rmd")
setwd('C://Users//fl299//PhD//Writing//Thesis//bookdown')
bookdown::render_book("index.Rmd")
library(bookdown)
unlink('index_cache', recursive = TRUE)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
setwd('C://Users//fl299//DOcuments')
library(bookdown)
bookdown::render_book("'C://Users//fl299//PhD//Writing//Thesis//index.Rmd")
setwd('C://Users//fl299//PhD//Writing//Thesis')
bookdown::render_book("'C://Users//fl299//PhD//Writing//Thesis//index.Rmd")
